
import { GoogleGenAI } from "@google/genai";
import { useStore } from '../hooks/useStore';

// The API key is injected via environment variables.
const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // In a real app, you'd want to handle this more gracefully.
  // For this context, we assume it's always provided.
  console.warn("API_KEY environment variable not set. Gemini API calls will fail.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY! });

export const generateText = async (prompt: string, systemInstruction: string): Promise<string> => {
  const modelName = useStore.getState().settings.engine.cloud.textModel;
  
  try {
    const response = await ai.models.generateContent({
      model: modelName,
      contents: prompt,
      config: {
        systemInstruction,
      },
    });
    return response.text;
  } catch (error) {
    console.error("Gemini text generation error:", error);
    throw new Error("Failed to generate text from Gemini API.");
  }
};


export const generateImage = async (prompt: string): Promise<string> => {
  const modelName = useStore.getState().settings.engine.cloud.imageModel;
  
  try {
    const response = await ai.models.generateImages({
        model: modelName,
        prompt: prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: '1:1',
        },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
        return response.generatedImages[0].image.imageBytes;
    } else {
        throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Gemini image generation error:", error);
    throw new Error("Failed to generate image from Gemini API.");
  }
};
