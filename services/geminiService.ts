import { GoogleGenAI, Modality, Type } from "@google/genai";

// --- DEFERRED INITIALIZATION ---
let ai: GoogleGenAI | null = null;
const USER_API_KEY_STORAGE = 'chimera_user_gemini_api_key';

function getGenAIClient(): GoogleGenAI | null {
    if (ai) {
        return ai;
    }

    const userApiKey = localStorage.getItem(USER_API_KEY_STORAGE);
    const envApiKey = process.env.GEMINI_API_KEY;
    const apiKey = userApiKey || envApiKey;

    if (!apiKey) {
        console.warn("Gemini API key is not set in environment or local storage.");
        return null;
    }

    try {
        ai = new GoogleGenAI({ apiKey });
        return ai;
    } catch (error) {
        console.error("Failed to initialize GoogleGenAI client:", error);
        if (userApiKey) {
            localStorage.removeItem(USER_API_KEY_STORAGE);
        }
        return null;
    }
}

export async function checkApiKey(): Promise<boolean> {
    const client = getGenAIClient();
    if (!client) {
        return false;
    }
    try {
        await client.models.list();
        return true;
    } catch (error) {
        console.error("API Key validation failed:", error);
        return false;
    }
}

export function setUserApiKey(key: string) {
    if (key) {
        localStorage.setItem(USER_API_KEY_STORAGE, key);
    } else {
        localStorage.removeItem(USER_API_KEY_STORAGE);
    }
    ai = null;
}

export async function* generateTextStream(prompt: string, modelName: string, systemInstruction: string): AsyncGenerator<string> {
    const client = getGenAIClient();
    if (!client) {
        throw new Error("Gemini client is not initialized. Please set an API key.");
    }
    
    try {
        const response = await client.models.generateContentStream({
            model: modelName,
            contents: prompt,
            config: {
                systemInstruction,
            },
        });

        for await (const chunk of response) {
            yield chunk.text;
        }
    } catch (error) {
        console.error("Gemini streaming text generation error:", error);
        throw new Error("Failed to generate streaming text from Gemini API.");
    }
}

export async function generateEnhancedPrompt(prompt: string, modelName: string): Promise<string> {
    const client = getGenAIClient();
    if (!client) throw new Error("Gemini client not initialized.");

    const fullPrompt = `Rephrase the following first-person player action into a descriptive, third-person literary action. Only return the rephrased action, no other text.\n\nORIGINAL: "${prompt}"\n\nREPHRASED:`;
     try {
        const response = await client.models.generateContent({
            model: modelName,
            contents: fullPrompt,
        });
        return response.text.trim();
    } catch (error) {
        console.error("Gemini prompt enhancement error:", error);
        throw new Error("Failed to generate enhanced prompt from Gemini API.");
    }
}

export const generateImage = async (prompt: string, modelName: string): Promise<string> => {
    const client = getGenAIClient();
    if (!client) throw new Error("Gemini client not initialized.");
  
    try {
        const response = await client.models.generateImages({
            model: modelName,
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            return response.generatedImages[0].image.imageBytes;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error("Gemini image generation error:", error);
        throw new Error("Failed to generate image from Gemini API.");
    }
};

export const suggestActionFromContext = async (context: string, modelName: string, voiceSample: string): Promise<string[]> => {
    const client = getGenAIClient();
    if (!client) throw new Error("Gemini client not initialized.");

    const prompt = `Given the following game context, suggest 1-3 creative and relevant actions or lines of dialogue for the player character. ${voiceSample ? `The character's speaking style is as follows: "${voiceSample}" Match this style.` : "The suggestions should be in the character's voice."}\n\nCONTEXT:\n${context}\n\nSUGGESTIONS:`;

    try {
        const response = await client.models.generateContent({
            model: modelName,
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        suggestions: {
                            type: Type.ARRAY,
                            items: { type: Type.STRING }
                        }
                    }
                }
            }
        });
        const json = JSON.parse(response.text);
        return json.suggestions || [];
    } catch (error) {
        console.error("Gemini action suggestion error:", error);
        throw new Error("Failed to get suggestions from Gemini API.");
    }
};

export const editImageWithMask = async (prompt: string, imageBase64: string, maskBase64?: string): Promise<{image: string, text: string}> => {
    const client = getGenAIClient();
    if (!client) throw new Error("Gemini client not initialized.");

    const modelName = 'gemini-2.5-flash-image-preview';

    const imagePart = { inlineData: { mimeType: 'image/jpeg', data: imageBase64 } };
    const textPart = { text: prompt };
    
    const parts = [imagePart, textPart];
    if (maskBase64) {
        const maskPart = { inlineData: { mimeType: 'image/png', data: maskBase64 }};
        parts.splice(1, 0, maskPart);
    }

    try {
        const response = await client.models.generateContent({
            model: modelName,
            contents: { parts },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });

        let newImageBase64 = '';
        let newText = '';

        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                newImageBase64 = part.inlineData.data;
            } else if (part.text) {
                newText = part.text;
            }
        }
        
        if (!newImageBase64) {
            throw new Error("Image editing API did not return an image.");
        }

        return { image: newImageBase64, text: newText };
    } catch(e) {
        console.error("Gemini image editing error:", e);
        throw new Error("Failed to edit image with Gemini API.");
    }
};

export const generateOnboardingFromImage = async (imageBase64: string, modelName: string): Promise<{name: string, backstory: string, openingPrompt: string}> => {
    const client = getGenAIClient();
    if (!client) throw new Error("Gemini client not initialized.");

    const imagePart = { inlineData: { mimeType: 'image/jpeg', data: imageBase64 } };
    const textPart = { text: "Analyze this character portrait. Based on their appearance, invent a creative character name, a short, compelling backstory (2-3 sentences), and an exciting opening story prompt for a fantasy RPG." };
    
    try {
        const response = await client.models.generateContent({
            model: modelName,
            contents: { parts: [imagePart, textPart] },
            config: {
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        name: { type: Type.STRING },
                        backstory: { type: Type.STRING },
                        openingPrompt: { type: Type.STRING }
                    }
                }
            }
        });

        return JSON.parse(response.text);

    } catch (e) {
        console.error("Gemini onboarding generation error:", e);
        throw new Error("Failed to generate character from image.");
    }
}
