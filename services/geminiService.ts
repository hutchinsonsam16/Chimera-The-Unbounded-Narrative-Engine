import { GoogleGenAI } from "@google/genai";
import { useStore } from '../hooks/useStore';

// The API key is injected via environment variables.
const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // In a real app, you'd want to handle this more gracefully.
  // For this context, we assume it's always provided.
  console.warn("API_KEY environment variable not set. Gemini API calls will fail.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY! });

export async function* generateTextStream(prompt: string): AsyncGenerator<string> {
    const state = useStore.getState();
    const modelName = state.settings.engine.cloud.textModel;
    const systemInstruction = state.settings.engine.cloud.systemPrompt;

    try {
        const response = await ai.models.generateContentStream({
            model: modelName,
            contents: prompt,
            config: {
                systemInstruction,
            },
        });

        for await (const chunk of response) {
            yield chunk.text;
        }
    } catch (error) {
        console.error("Gemini streaming text generation error:", error);
        throw new Error("Failed to generate streaming text from Gemini API.");
    }
}


export const generateImage = async (prompt: string): Promise<string> => {
  const modelName = useStore.getState().settings.engine.cloud.imageModel;
  
  try {
    const response = await ai.models.generateImages({
        model: modelName,
        prompt: prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: '1:1',
        },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
        return response.generatedImages[0].image.imageBytes;
    } else {
        throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Gemini image generation error:", error);
    throw new Error("Failed to generate image from Gemini API.");
  }
};
